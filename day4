Creating Variables

Python has no command for declaring a variable.

A variable is created the moment you first assign a value to it
Example

x = 5

y = "welcome"

print(x)

print(y)

Variables do not need to be declared with any particular type, and can even change type after they have been set.
Example

x = 4           # x is of type int

x = "Technest" # x is now of type str

print(x)
Casting

If you want to specify the data type of a variable, this can be done with casting.
Example

x = str(3)        # x will be '3'

y = int(3)        # y will be 3

z = float(3)  # z will be 3.0

Legal variable names:myvar = "Technest"

my_var = "Technest"

_my_var = "Technest"

myVar = "Technest"

MYVAR = "Technest"

myvar2 = "Technest"

Illegal variable names:

2myvar = "Technest"

my-var = "Technest"

my var = "Technest"
Multi Words Variable Names

Variable names with more than one word can be difficult to read.

There are several techniques you can use to make them more readable:
Camel Case

Each word, except the first, starts with a capital letter:

myVariableName = "Technest"

*Pascal Case*

Each word starts with a capital letter:

MyVariableName = "Technest"

*Snake Case*

Each word is separated by an underscore character:

my_variable_name = "Technest"

Assign Multiple Values
Many Values to Multiple Variables

Python allows you to assign values to multiple variables in one line:
Example

x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)
One Value to Multiple Variables

And you can assign the same value to multiple variables in one line:
Example
x = y = z = "Orange"
print(x)
print(y)
print(z)

Output Variables
Output Variables

The Python print() function is often used to output variables.
Example
x = "Python is awesome"
print(x)

In the print() function, you output multiple variables, separated by a comma:
Example
x = "Python"
y = "is"
z = "awesome"

print(x, y, z)You can also use the + operator to output multiple variables:
Example
x = "Python "
y = "is "
z = "awesome"

print(x + y + z)For numbers, the + character works as a mathematical operator:x = 5
y = 10
print(x + y)

In the print() function, when you try to combine a string and a number with the + operator, Python will give you an error:
Example
x = 5
y = "Technest"

print(x + y)

The best way to output multiple variables in the print() function is to separate them with commas, which even support different data types:
Example

x = 5
y = "Technest"
print(x, y)

Variable Names

A variable can have a short name (like x and y) or a more descriptive name (age, carname, total_volume). Rules for Python variables:

    A variable name must start with a letter or the underscore character
    A variable name cannot start with a number
    A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
    Variable names are case-sensitive (age, Age and AGE are three different variables)
    A variable name cannot be any of the Python Keywords.

"""Keywords(NOT TO BE USED AS VARIABLES):

and                :A logical operator

as                :To create an alias

assert                :For debugging

break                :To break out of a loop

class                :To define a class

continue        :To continue to the next iteration of a loop

def                :To define a function

del                :To delete an object

elif                :Used in conditional statements, same as else if

else                :Used in conditional statements

except                :Used with exceptions, what to do when an exception occurs

False                :Boolean value, result of comparison operations

finally                :Used with exceptions, a block of code that will be executed no matter if there is an

                        exception or not  

for                :To create a for loop

from                :To import specific parts of a module

global                :To declare a global variable

if                :To make a conditional statement

import                :To import a module

in                :To check if a value is present in a list, tuple, etc.

is                :To test if two variables are equal

lambda        :To create an anonymous function

None                :Represents a null value

nonlocal        :To declare a non-local variable

not                :A logical operator

or                :A logical operator

pass                :A null statement, a statement that will do nothing

raise                :To raise an exception

return                :To exit a function and return a value

True                :Boolean value, result of comparison operations

try                :To make a try...except statement

while                :To create a while loop

with                :Used to simplify exception handling

yield                :To end a function, returns a generator"""
